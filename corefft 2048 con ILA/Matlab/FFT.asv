clear all;
Fs = 1000;            % Sampling frequency
T = 1/Fs;             % Sampling period
L = 2048;             % Length of signal, Cantidad de muestras de la transformada de Fourier
t = (0:L-1)*T;        % Time vector
S = 0.7*sin(2*pi*50*t) + sin(2*pi*120*t); % Señal a ser muestreada
SEN=sin(2*pi*100*t);
X = S + 2*randn(size(t)); % Señal a ser muestreada + ruido
figure(1);
plot(L*t(1:L),X(1:L));
axis([0 L -8 8]);
% title('Signal S');
xlabel('t (milliseconds)');
ylabel('X(t)');


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transformada de Fourier Matlab
FFT_Result = fft(X);
P2_matlab = abs(FFT_Result/L);
P1_matlab = P2_matlab(1:L/2+1);
P1_matlab_normalizado=P1_matlab./max(P1_matlab);
P1_matlab(2:end-1) = 2*P1_matlab(2:end-1);
figure(3);
f = Fs*(0:(L/2))/L;
plot(f,P1_matlab_normalizado);
% title('Single-Sided Amplitude Spectrum of Signal')
xlabel('f (Hz)')
ylabel('|P1(f)|')

% Transformada de Fourier Matlab
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Pf=fi(X);
q=quantizer([16 12]); % 12 Crea el cuantizador para un formato punto fijo con tamaño de palabra de 16 bit con 12 bit de parte fraccionaria
b = num2bin(q,X);     %Convierte de numero a String binario usando el cuantizador anterior
q_inverso=quantizer([16 0]); 

aux=zeros(1,L*4); %Cantidad de muestras de la transformada L * La cantidad de byte por muestra 
                  % 4 byte (16 bit parte real y 16 bit parte imaginaria)

j=1; %las muestras originales
for i=1:4:L*4
     % Convert two's complement binary string to number using quantizer object
     % Se guardan los primeros 8 bits 
     temp=bin2num(q_inverso,b(j,1:8));
     % Convert two's complement binary string to number using quantizer object
     % Se guardan los 8 bits restantes   
     temp2=bin2num(q_inverso,b(j,9:16)); 
     
     ceros1=0;
   %  Se forma el vector con los datos reales y datos imaginarios(ceros) de
   %  las muestras de la señal para conformar los 32 bits por cada muestra necesarios para
   %  el core fft
  aux(1,i:i+3)=[temp, temp2, ceros1, ceros1];
   j=j+1;
end
sal=aux;
% Tx y Rx puerto uart
s = serial('COM4','BaudRate',115200,'Parity','none','DataBits',8,'StopBits',1);
s.OutPutBufferSize = 186624;
s.InputBufferSize = 4096;
fopen(s);
fwrite(s,sal(1,1:L*4),'uint8');
y=fread(s,L*4);
fclose(s);
% fclose(s);

%Procesando los datos enviados por la FPGA

y_hex=dec2hex(y);
indice=1;
for i=1:4:length(y)
    
   y_concat(indice,1:8)= strcat(y_hex(i+3,1:2),y_hex(i+2,1:2),y_hex(i+1,1:2),y_hex(i,1:2));
    indice=indice+1;
end

for i=1:1:L
 imaginary_array=hex2num(q, y_concat(i,1:4));
 real_array=hex2num(q, y_concat(i,5:8)); 
 complex_array(i)=complex(real_array,imaginary_array);
    
end

P2_fpga = abs(complex_array/L);
P1_fpga = P2_fpga(1:L/2+1);
P1_fpga(2:end-1) = 2*P1_fpga(2:end-1);
P1_fpga_normalizado=P1_fpga./max(P1_fpga);
P1_matlab_normalizado=P1_matlab./max(P1_matlab);
figure(4);
f = Fs*(0:(L/2))/L;
plot(f,P1_fpga_normalizado,'green', 'DisplayName','Core FFT FPGA');
hold on
plot(f,P1_matlab_normalizado,'b--o', 'DisplayName','FFT Matlab ');

legend('Core FFT FPGA','FFT Matlab');
xlabel('f (Hz)')
ylabel('|P1(f)|')
resta=P1_fpga_normalizado-P1_matlab_normalizado;
err(1)=norm(P1_fpga_normalizado-P1_matlab_normalizado);

% Error cuadratico medio entre la FFT calculada por Matlab y la calculada
% por el Core FFT de Xilinx
RMSE = sqrt(mean((resta).^2));